AWSTemplateFormatVersion: 2010-09-09

# This CloudFormation template deploys a basic VPC:
# - with 2 public subnet in the fixed Availability Zones, us-west-2a and 2b
# - ec2 instance running httpdd and a website
# - internet gateway enables the vpc public subnet to access to the internet
# - the alb routes traffic between the to public subnets

Description: VPC with 2 public subnets

Parameters:
  KeyName:
    Description: Key Pair for EC2
    Type: 'AWS::EC2::KeyPair::KeyName'

Resources:

  # First, a VPC:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
      - Key: Name
        Value: !Join ['', [!Ref "AWS::StackName", "-VPC" ]]

  # Next, 2 public subnets:
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.10.0/24
      AvailabilityZone: us-west-2a
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-A

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.20.0/24
      AvailabilityZone: us-west-2b
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-B

  # VPC will need internet access:      
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
    Properties:
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-InternetGateway
    
  AttachVPCtoInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    # Notice how you can't attach an IGW to a VPC unless both are created:
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # route table for the public subnet:
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public

  InternetRouteViaIGW:   # Public internet route entry via IGW:
    Type: AWS::EC2::Route
    DependsOn: AttachVPCtoInternetGateway
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Attach the public subnets to public route tables, 
  # and attach the private subnets to private route tables:    
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicSubnetRouteTable

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicSubnetRouteTable

  # Setup subnet Network ACLs
  # https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html
  # Public subnet INBOUND
  PublicSubnetNetworkACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-SubnetNetworkACLs

  PublicSubnetANetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      NetworkAclId: !Ref PublicSubnetNetworkACL

  PublicSubnetBNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      NetworkAclId: !Ref PublicSubnetNetworkACL

  # Add entry - Allow HTTP connections from the public internet
  PublicSubnetHTTPInboundFromInternetAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicSubnetNetworkACL
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80

  # Add entry - Allow HTTPS connections from the public internet
  PublicSubnetHTTPSInboundFromInternetAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicSubnetNetworkACL
      RuleNumber: 110
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443

  # Add entry - Allow SSH connections from the configured source CIDR block
  PublicSubnetSSHInboundFromInternetAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicSubnetNetworkACL
      RuleNumber: 120
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0     # can be customized using parameter to xxx.xxx.xxx.xxx/x
      PortRange:
        From: 22
        To: 22

  # Add entry - Allow responses to connections established from within the public subnets
  # Commonly these are responses for HTTP/HTTPS connections for software updates)
  PublicSubnetInboundReturnFromInternetAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicSubnetNetworkACL
      RuleNumber: 130
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 32768    # original was 1024; need to figure out why!!
        To: 65535

  # Public subnet OUTBOUND
  # Add entry - Allow HTTP connections to the public internet
  PublicSubnetHTTPOutboundToInternetAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicSubnetNetworkACL
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80

  # Allow HTTPS connections to the public internet
  PublicSubnetHTTPSOutboundToInternetAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicSubnetNetworkACL
      RuleNumber: 110
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443

  # Allow responses to connections established from the outside of the public subnets
  # Commonly these are responses to HTTP/HTTPS and SSH connections
  PublicSubnetOutboundReturnToInternetAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicSubnetNetworkACL
      RuleNumber: 200
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 32768
        To: 65535
  
  # Bastion host
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      VPCZoneIdentifier:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      MinSize: 0
      MaxSize: 1
      DesiredCapacity: 1

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn: AttachVPCtoInternetGateway
    Properties:
      LaunchTemplateData:
        InstanceType: t2.micro
        ImageId: ami-0c2ab3b8efb09f272
        SecurityGroupIds: 
          - !Ref BastionHostSecurityGroup
        KeyName: !Ref KeyName
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: Bastion Host
          - ResourceType: volume
            Tags:
              - Key: Name
                Value: Bastion Host
        InstanceMarketOptions:
          MarketType: spot
          SpotOptions:
            SpotInstanceType: one-time
            InstanceInterruptionBehavior: terminate
        UserData:
          Fn::Base64:
            Fn::Join:
              - ''
              - - "#!/bin/bash\n"
                - "yum -y --security update\n"

  BastionHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows SSH connections from the Internet
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-BastionHostSecurityGroup


  # EC2 instances:
  EC2InstanceA:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: us-west-2a
      ImageId: ami-0c2ab3b8efb09f272
      InstanceType: t2.micro
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EC2-A
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      KeyName: !Ref KeyName
      SubnetId: !Ref PublicSubnetA
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<h1>Hello from Region us-west-2a</h1>" > /var/www/html/index.html

  EC2InstanceB:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: us-west-2b
      ImageId: ami-0c2ab3b8efb09f272
      InstanceType: t2.micro
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EC2-B
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      KeyName: !Ref KeyName
      SubnetId: !Ref PublicSubnetB
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<h1>Hello from Region us-west-2b</h1>" > /var/www/html/index.html

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-EC2-SecGrp
      GroupDescription: EC2 with ingress ports 22 and 80
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId:
          Fn::GetAtt:
          - ELBSecurityGroup
          - GroupId
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0     # can be fixed to a specific IP address xxx.xxx.xxx.xxx

  EC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      Name: EC2TargetGroup
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      Targets:
      - Id: !Ref EC2InstanceA
        Port: 80
      - Id: !Ref EC2InstanceB
        Port: 80
      UnhealthyThresholdCount: 3
      VpcId: !Ref VPC

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: AttachVPCtoInternetGateway
    Properties:
      Name: !Sub ${AWS::StackName}-ALB
      Scheme: internet-facing
      Subnets:
      - !Ref PublicSubnetA
      - !Ref PublicSubnetB
      SecurityGroups:
        - !GetAtt ELBSecurityGroup.GroupId

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EC2TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ELB Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

